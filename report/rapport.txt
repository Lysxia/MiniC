** Rapport du projet de compilateur MiniC **
*              Xia Li-yao                  *

Comme je ne savais pas par où commencer,
j'ai choisi d'écrire le compilateur dans l'ordre
des différentes étapes de l'analyse. 

Lexeur -> Parseur -> Typeur -> Selection d'instructions (IS) -> MIPS

Les fichiers qui composent mon programme sont (avec eventuellement
une interface) :
  - error.ml - Fichier commun à tout le programme, de gestion d'erreurs
              (affichage des messages d'erreur)
  - ast.mli - Décrit le type d'arbre de syntaxe abstraite décoré en
              sortie du parseur.
  - lexer.mll
  - parser.mly
  - typing.ml
  - iselect.ml
  - print_ist.ml - Affichage de l'arbre en sortie de l'IS
  - mips.ml - Generation
  - main.ml
\end{itemize}


\section{Choix et difficultés}

Je m'y suis pris assez tôt, donc j'avais globalement fini le
lexeur et le parseur avant qu'ils ne soient abordés dans le cours.

En cas d'ambiguïté dans le sujet, gcc a été la référence. (ainsi que pour
les messages d'erreurs que j'ai repris)

Pour la deuxième partie du sujet j'ai décidé d'utiliser la sélection
d'instructions.

J'ai d'abord modifié le typeur et l'AST :
\begin{itemize}
  \item les fonctions sont représentées par un type enregistrement,
  pour plus de lisibilité
  \item les variables globales et locales sont gérées différemment par le
  typeur, en particulier seules les variables locales sont converties en
  entiers.
  \item les variables locales sont ramenées en en-tête des fonctions
\end{itemize}


\end{document}


